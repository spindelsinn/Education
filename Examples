# Find someth in a big bin file
import os
for i in range(10):	
	if os.path.exists('linux_dump' + str(i) +'.bin') == 0: # if file does't exist create a new one 
		filename = ('linux_dump' + str(i) +'.bin') 
		break	
command = 'ff dump -min 0x10000000 -max 0xbc000000 -out '+filename
os.system(command)
i = 0
total_ex = 0
with open(filename, "rb",) as f:
	file_size = os.stat(filename).st_size   # to know file size
	for i in range( file_size//1024):
		byte =f.read(1024)

		is_exist = byte.find(b'\x61\x75\x74\x68\x09\x72\x65\x71\x75') # b' important
		if is_exist != -1:

			total_ex = is_exist + 1024*i
			print("address in dump : ", hex(total_ex))
	
f.close()
exist_with_shift =268435456 + total_ex	# -min 0x10000000
print("address in phisical mem:", hex(exist_with_shift))

command = 'ff write -min '+ hex(exist_with_shift+5) + ' -in ' + '6f7074696f6e616c09'
print(command)
os.system(command)

========================================================================================================
find shortest
def find_short(s):
    return min(len(x) for x in s.split())
========================================================================================================
Bob is preparing to pass IQ test. The most frequent task in this test is to find out which one of the given numbers
differs from the others. Bob observed that one number usually differs from the others in evenness. Help Bob â€” to check his answers,
he needs a program that among the given numbers finds one that is different in evenness, and return a position of this number.
! Keep in mind that your task is to help Bob solve a real IQ test, which means indexes of the elements start from 1 (not 0)

def iq_test(numbers):
    e = [int(i) % 2 == 0 for i in numbers.split()]

    return e.index(True) + 1 if e.count(True) == 1 else e.index(False) + 1

========================================================================================================

import sqlite3
conn=sqlite3.connect('music.sqlite')
cur=conn.cursor()
cur.execute('DROP TABLE IF EXISTS Tracks')
cur.execute('CREATE TABLE Tracks (title TEXT, plays INTEGER)')
conn.close()

=========================================================================================================
def solution(s):
    return [s[x:x+2] if x < len(s) - 1 else s[-1] + "_" for x in range(0, len(s), 2)]
=========================================================================================================    
A pangram is a sentence that contains every single letter of the alphabet at least once. 
For example, the sentence "The quick brown fox jumps over the lazy dog" is a pangram, because it uses the letters A-Z 
at least once (case is irrelevant).Given a string, detect whether or not it is a pangram. Return True if it is, False if not. Ignore numbers and punctuation.

import string
import re

def is_pangram(s):
    alpha = dict.fromkeys(string.ascii_lowercase, 0)
    s_low = re.sub("[^a-z]+", "", s.lower())
    for i in s_low:
        alpha[i] = alpha.get(i) + 1
    return not(0 in alpha.values())
=========================================================================================================
