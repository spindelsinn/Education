# input and open file
input Get data from the “outside world”. This might be reading data from a ﬁle, or even some kind of sensor like a microphone or GPS. In our initial programs, our input will come from the user typing data on the keyboard.
output Display the results of the program on a screen or store them in a ﬁle or perhaps write them to a device like a speaker to play music or speak text.
name = input('Enter file:') 

if : elif : else :

fout = open('output.txt', 'w')
fout.write(line1)
fout.close()

a=[1,2,3] -list

type(x) - what type a value has  

 //  % - modulus operator
 
 x is y # x is the same as y 
 x is not y # x is not the same as y

try:
  fahr = float(inp) 
except: 
  print('Please enter a number')
  
max(), min(), len() 
int(), float(), str()
>>> 'a' in 'banana' 
True 

The dir() method tries to return a list of valid attributes of the object. If empty - list of local variables.

import random
random.random() -  returns a random ﬂoat between 0.0 and 1.0 (including 0.0 but not 1.0)
random.randint(5, 10) -returns int between 5 and 10
random.choice(t) -To choose an element from a sequence at random. Example t=[1,2,3] or just a string
random.randrange(10,20,2) - 2 is a step in range from 10 to 20.
random.shuffle(r) - shuffle elements r is a range. Output is [0, 4, 1, 6, 8, 3, 2, 5, 9, 7] 
random.sample(range(50),10) - take 10 elements from 0 to 50. Output [22, 29, 30, 14, 16, 17, 32, 48, 2, 19] 

import math
pow(num, power): возведение числа num в степень power
sqrt(num): квадратный корень числа num
ceil(num): округление числа до ближайшего наибольшего целого
floor(num): округление числа до ближайшего наименьшего целого
factorial(num): факториал числа
degrees(rad): перевод из радиан в градусы
radians(grad): перевод из градусов в радианы
cos(rad): косинус угла в радианах
sin(rad): синус угла в радианах
tan(rad): тангенс угла в радианах
acos(rad): арккосинус угла в радианах
asin(rad): арксинус угла в радианах
atan(rad): арктангенс угла в радианах
log(n, base): логарифм числа n по основанию base
log10(n): десятичный логарифм числа n

String methods
string.punctuation -  let Python tell us the list of characters that it considers “punctuation”
capitalize(): Converts first character to Capital Letter 
center():Pads string with specified character (stringshifting, can be filled)
casefold():converts to casefolded strings (to small letters)
count():returns occurrences of substring in string (find word)
endswith():Checks if String Ends with the Specified Suffix 
expandtabs():Replaces Tab character With Spaces 
encode():returns encoded string of given string 
find():Returns the Highest Index of Substring (count letters not words, can be rfind(fron right edge))
format():formats string into nicer output 
index():Returns Index of Substring(just find in string) 
isalnum(): if not letters or numbers -> error  
isalpha():Checks if All Characters are Alphabets 
isdecimal():Checks Decimal Characters 
isdigit():Checks Digit Characters 
isidentifier():Checks is it good identifier for Python?(no spaces or no starts with numbers)
islower():Checks if all Alphabets in a String are Lowercase 
isnumeric():is it Numeric Characters? 
isprintable():Characters that occupies printing space on the screen-printable characters(letters and symbols digits punctuation whitespace)
isspace():Checks Whitespace Characters 
istitle():Checks for Titlecased String 
isupper():returns if all characters are uppercase characters 
join():Returns a Concatenated String 
ljust(width,fill):returns left-justified string of given width(for constant width of strings) 
rjust(width,fill):returns right-justified string of given width(for constant width of strings) 
lower():returns lowercased string 
upper():returns uppercased string 
swapcase():swap uppercase characters to lowercase; vice versa 
lstrip():Removes Characters or spaces from left 
rstrip():Removes Characters or spaces from right
strip():Removes Characters or spaces from left and right 
partition():Returns a Tuple with 3 elemets 1- before separator, separator and after separator 
maketrans():returns a translation table or connect strings to a dictionary
rpartition():same as partition() but start search from right 
translate(): translate with table which was created by maketrans() (line=line.translate(line.maketrans('','', string.punctuation))) - del all punctuation
str.replace(old, new [, count]) :Replaces Substring Inside 
str.rfind(sub[, start[, end]] ):Returns the Highest Index of Substring 
str.rindex(sub[, start[, end]] ) :Returns Highest Index of Substring 
str.split([separator [, maxsplit]]):Splits String from Left 
str.rsplit([separator [, maxsplit]]):Splits String From Right 
str.splitlines([keepends]): spit by lines and ret list
str.startswith(prefix[, start[, end]]):Checks if String Starts with the Specified String 
str.title(): returns a string with first letter of each word capitalized 
str.zfill(width):returns a copy of the string with '0' characters padded to the left. 
format_map() similar to str.format(**mapping) except that str.format(**mapping) creates a new dictionary whereas str.format_map(mapping) doesn't

List methods
list.append (element) - add to list
list.insert(<position, element) - Inserts an elements at specified position
List1.extend(List2) - add list2 to list1
sum(List) - Calculates sum of all the elements of List
List.count(element) - how many times element in List
len(list_name) - Calculates total length of List
List.index(element[,start[,end]]) - Returns the index of first element. Start and End index are not necessary parameters
min(List) - smallest element in list
max(List) - biggest element in list
List.sort(reverse=True) - sorting
list.pop([index]) - takes one element
del list.[index] - delete element by index
list.remove(element) - delete by name or value
list.clear - clear

Dictionaries
eng2sp=dict()
eng2sp['one']='uno'
{'one':'uno'}

'one' in eng2sp - True(works only for keys)

To find values: create a list with values from dict  vals=list(eng2sp.values()) 
'uno' in vals? - yes 

cmp(dict1, dict2)- Compares elements of both dict
len(dict)- Gives the total length of the dictionary. This would be equal to the number of items in the dictionary.
str(dict) - Produces a printable string representation of a dictionary
type(variable)-Returns the type of the passed variable. If passed variable is dictionary, then it would return a dictionary type.

dict.clear() - Removes all elements of dictionary dict
dict.copy()-Returns a shallow copy of dictionary dict
dict.fromkeys()-Create a new dictionary with keys from seq and values set to value
dict.get(key, default=None)-For key key, returns value or default if key not in dictionary
dict.has_key(key)-Returns true if key in dictionary dict, false otherwise
dict.items()-Returns a list of dict's (key, value) tuple pairs
dict.keys()-Returns list of dictionary dict's keys
dict.setdefault(key, default=None)-Similar to get(), but will set dict[key]=default if key is not already in dict
dict.update(dict2)-Adds dictionary dict2's key-values pairs to dict
dict.values()-Returns list of dictionary dict's values

Tuples
f you want to use a sequence as a dictionary key, you have to use an immutable type like a tuple or string.
If you are passing a sequence as an argument to a function, using tuples reduces the potential for unexpected behavior due to aliasing.
You can’t modify the elements of a tuple, but you can replace one tuple with
another:
>>>t=('A',)+t[1:]
>>>print(t)
('A','b','c','d','e')

When two or more variables on a left side then it is tuple
>>>addr='monty@python.org'
>>>uname, domain=addr.split('@')

To sort of dict keys
>>>d={'a':10,'b':1,'c':22}
>>>t=list(d.items())
>>>t
[('b',1), ('a',10), ('c',22)]
>>>t.sort()
>>>t
[('a',10), ('b',1), ('c',22)

for last, first in directory:
   print(first, last, directory[last,first])
   
Regular expression  
ˆ the beginning of the line
$  the end of the line
. Matches any character (a wildcard).
\s Matches a whitespace character.
\S Matches a non-whitespace character (opposite of \s).
* Applies to the immediately preceding character(s) and indicates to match zero or more times.
*? Applies to the immediately preceding character(s) and indicates to match zero or more times in “non-greedy mode”.
+ Applies to the immediately preceding character(s) and indicates to match one or more times.
+? Applies to the immediately preceding character(s) and indicates to match one or more times in “non-greedy mode”.
? Applies to the immediately preceding character(s) and indicates to match zero or one time.
?? Applies to the immediately preceding character(s) and indicates to match zero or one time in “non-greedy mode”.
[aeiou] Matches a single character as long as that character is in the specified set.
In this example, it would match “a”, “e”, “i”, “o”, or “u”, but no other characters.
[a-z0-9]You can specify ranges of characters using the minus sign. 
This exampleis a single character that must be a lowercase letter or a digit.
[ˆA-Za-z]When the first character in the set notation is a caret, it inverts the logic.  
This example matches a single character that is anything other than an uppercase or lowercase letter.
( )When parentheses are added to a regular expression, they are ignored for the purpose of matching, but allow you to extract a particular subset of the matched
string rather than the whole string when using findall()
\b Matches the empty string, but only at the start or end of a word.
\B Matches the empty string, but not at the start or end of a word.
\d Matches any decimal digit; equivalent to the set [0-9].
\D Matches any non-digit character; equivalent to the set [ˆ0-9].

re.match(pattern, string, flags=0) If zero or more characters at the beginning of string match the regular expression pattern,
return a corresponding MatchObject instance. Return None if the string does not match the pattern; 
If you want to locate a match anywhere in string, use search() instead 

re.search(pattern, string, flags=0) Scan through string looking for the first location where the regular expression
pattern produces a match, and return a corresponding MatchObject instance. Return None if no position in the string matches the pattern; note that this is different from finding a zero-length match at some point in the string.

re.findall(pattern, string, flags=0) Return all non-overlapping matches of pattern in string, as a list of strings. 
The string is scanned left-to-right, and matches are returned in the order found.
Due to the limitation of the current implementation the character following an empty match is not included in a next match,
so findall(r'^|\w+', 'two words') returns ['', 'wo', 'words'] (note missed “t”). This is changed in Python 3.7. 

re.split(pattern, string, maxsplit=0, flags=0) Split string by the occurrences of pattern. 
If capturing parentheses are used in pattern, then the text of all groups in the pattern are also returned as part
of the resulting list. If maxsplit is nonzero, at most maxsplit splits occur, and the remainder of the string is returned as 
the final element of the list. 

re.sub(pattern, repl, string, count=0, flags=0) change words in string 
result = re.sub(r'India', 'the World', 'AV is largest Analytics community of India')
print result
'AV is largest Analytics community of the World'
 
re.compile() make regular expresion an object.
pattern = re.compile('AV')
result = pattern.findall('AV Analytics Vidhya AV')
print result
['AV', 'AV']

Network

Server
import socket
sock = socket.socket() #create socket
sock.bind(('', 9090)) #connect sock to our port
sock.listen(1)       # max connections in a line
conn, addr = sock.accept() # return info about connected  
print 'connected:', addr
while True:
    data = conn.recv(1024) # recieve data from client
    if not data:
        break
    conn.send(data.upper()) # send data to client
conn.close()

CLIENT
import socket
sock = socket.socket()
sock.connect(('localhost', 9090))
sock.send('hello, world!')
data = sock.recv(1024)
sock.close()
print data

socket.accept() - Accept a connection.return (conn, address) conn is a new socket object usable to send and receive data
socket.bind(address) Bind the socket to address. The socket must not already be bound
socket.close() - close connect but not right now. for right now use shutdown() before close() 
socket.connect(address)
socket.connect_ex(address) - same as connect but return an error indicator instead of raising an exception. 0 -operation succeeded, otherwise the value of the errno variable 
socket.detach() - Put the socket object into closed state without actually closing
socket.dup() - Duplicate the socket.
socket.fileno() - Return the socket’s file descriptor (a small integer), or -1 on failure.This is useful with select.select()
socket.get_inheritable() -Get the inheritable flag of the socket’s file descriptor or socket’s handle: True if inherited in child processes, False if it cannot
socket.getpeername()Return the remote address to which the socket is connected. useful to find out the port number of a remote IPv4/v6 socket, for instance. 
socket.getsockname()Return the socket’s own address. This is useful to find out the port number of an IPv4/v6 socket, for instance
socket.getsockopt(level, optname[, buflen]) - Return the value of the given socket option. The needed symbolic constants (SO_* etc.) are defined in this module. If buflen is absent, an integer option is assumed and its integer value is returned by the function. If buflen is present, it specifies the maximum length of the buffer used to receive the option in, and this buffer is returned as a bytes object. It is up to the caller to decode the contents of the buffer (see the optional built-in module struct for a way to decode C structures encoded as byte strings).
socket.gettimeout() - Return the timeout in seconds (float) associated with socket operations, or None if no timeout is set. This reflects the last call to setblocking() or settimeout().

other in https://docs.python.org/3/library/socket.html

urllib

import urllib.request
fhand=urllib.request.urlopen('http://data.pr4e.org/romeo.txt')
forline in fhand:
  print(line.decode().strip())
  
 
urllib.request for opening and reading URLs
urllib.error containing the exceptions raised by urllib.request
urllib.parse for parsing URLs
urllib.robotparser for parsing robots.txt files

SSL!

JSON or XML

Object-Oriented Programming
Much like the def keyword does not cause function code to be executed, the classkeyword does not create an object. Instead, the
class keyword defines a template indicating what data and code will be contained in each object of type PartyAnimal. 
The class is like a cookie cutter and the objects created using the class are the cookies.

__init__ -  set up some default or initial values for the object whet it's creating
__del__ - what to do when object destroed(an=PartyAnimal() now its obj and then just make object an int an = 42)

class PartyAnimal:
 x = 0
 name=''

class CricketFan(PartyAnimal):
 points = 0
Cricket Fan is an extention of PartiAnimal and we can use all Partyanimals vars and methods inside Cricketfan

SQL

sqlite3.version-The version number of this module, as a string. This is not the version of the SQLite library.

sqlite3.version_info-The version number of this module, as a tuple of integers. This is not the version of the SQLite library.

sqlite3.sqlite_versio-The version number of the run-time SQLite library, as a string.

sqlite3.sqlite_version_info-The version number of the run-time SQLite library, as a tuple of integers.

 sqlite3.PARSE_DECLTYPES - used with the detect_types parameter of the connect().parse out the first word of the declared type,
 i. e. for “integer primary key”, it will parse out “integer”, or for “number(10)” it will parse out “number”. 
 Then for that column, it will look into the converters dictionary and use the converter function registered for that type there.

sqlite3.PARSE_COLNAMES - 


============================================================================================
any():Checks if any Element of an Iterable is True 
all():returns true when all elements in iterable is true 
ascii():Returns String Containing Printable Representation 
bool():Coverts a Value to Boolean 
bytearray():returns array of given byte size 
bytes():returns immutable bytes object 
compile():Returns a Python code object 
complex():Creates a Complex Number 
enumerate():Returns an Enumerate Object 
filter():constructs iterator from elements which are true 
Python float() 
returns floating point number from number, string 
Python input() 
reads and returns a line of string 
Python int() 
returns integer from a number or string 
Python iter() 
returns iterator for an object 
Python len() 
Returns Length of an Object 
Python max() 
returns largest element 
Python min() 
returns smallest element 
Python map() 
Applies Function and Returns a List 
Python ord() 
returns Unicode code point for Unicode character 
Python reversed() 
returns reversed iterator of a sequence 
Python slice() 
creates a slice object specified by range() 
Python sorted() 
returns sorted list from a given iterable 
Python sum() 
Add items of an Iterable 
Python zip() 
Returns an Iterator of Tuples 
